// Generated by `wit-bindgen` 0.34.0. DO NOT EDIT!

pub fn wasmExportLoad(p0 : Int, p1 : Int) -> Unit {
  let result = @ffi.ptr2str(p0, p1)
  let _ = @mnist.load(result)

}

pub fn wasmExportSave() -> Int {
  let result : String = @mnist.save()
  @ffi.store32(return_area + 4, result.iter().count())
  @ffi.store32(return_area + 0, @ffi.str2ptr(result))
  return return_area
}

pub fn wasmExportSavePostReturn(p0 : Int) -> Unit {
  @ffi.free(@ffi.load32(p0 + 0))
}

pub fn wasmExportInfer(p0 : Int, p1 : Int) -> Int {
  let result = @ffi.ptr2double_array(p0, p1)
  let result0 : FixedArray[Double] = @mnist.infer(result)
  @ffi.store32(return_area + 4, result0.length())
  @ffi.store32(return_area + 0, @ffi.double_array2ptr(result0))
  return return_area
}

pub fn wasmExportInferPostReturn(p0 : Int) -> Unit {
  @ffi.free(@ffi.load32(p0 + 0))
}

pub fn wasmExportTrain(p0 : Int, p1 : Int, p2 : Double) -> Double {
  let array : FixedArray[(FixedArray[Double], Int)] = FixedArray::makei(
    p1,
    fn(index) {
      let base = p0 + index * 12
      let result = @ffi.ptr2double_array(
        @ffi.load32(base + 0),
        @ffi.load32(base + 4),
      )
      (result, @ffi.load32(base + 8))
    },
  )
  @ffi.free(p0)
  let result0 : Double = @mnist.train(array, p2)
  return result0
}
