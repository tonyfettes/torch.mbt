package tonyfettes/torch/nn

alias @moonbitlang/core/json as @json
alias @tonyfettes/torch/shape as @shape
alias @tonyfettes/torch/tensor as @tensor

// Values

// Types and methods
pub(readonly) struct AvgPool2d {
  kernel_size : (Int, Int)
  stride : (Int, Int)
}
impl AvgPool2d {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new[KernelSize : @shape.Shape2d](KernelSize, stride? : @shape.Shape2d) -> Self
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for AvgPool2d
impl ToJson for AvgPool2d
impl @json.FromJson for AvgPool2d

pub(readonly) struct Conv2d {
  weight : Array[Array[@tensor.Tensor[Float]]]
  bias : @tensor.Tensor[Float]
  padding : (Int, Int)
}
impl Conv2d {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new[KernelSize : @shape.Shape2d](Int, Int, kernel_size~ : KernelSize, padding~ : @shape.Shape2d = ..) -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for Conv2d
impl ToJson for Conv2d
impl @json.FromJson for Conv2d

type CrossEntropyLoss
impl CrossEntropyLoss {
  forward(Self, @tensor.Tensor[Float], @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  new(reduction~ : Reduction = ..) -> Self
  output(Self, Logger) -> Unit
}

type Flatten
impl Flatten {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new(start~ : Int = .., end? : Int) -> Self
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for Flatten
impl ToJson for Flatten
impl @json.FromJson for Flatten

pub(readonly) struct Linear {
  weight : @tensor.Tensor[Float]
  bias : @tensor.Tensor[Float]
}
impl Linear {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new(Int, Int) -> Self
  of(@tensor.Tensor[Float], @tensor.Tensor[Float]) -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for Linear
impl ToJson for Linear
impl @json.FromJson for Linear

type MSELoss
impl MSELoss {
  forward(Self, @tensor.Tensor[Float], @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  new() -> Self
  output(Self, Logger) -> Unit
}

type RMSNorm
impl RMSNorm {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new[Shape : @shape.Shape](Shape, eps? : Float) -> Self
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for RMSNorm
impl ToJson for RMSNorm
impl @json.FromJson for RMSNorm

type ReLU
impl ReLU {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for ReLU
impl ToJson for ReLU
impl @json.FromJson for ReLU

pub(all) enum Reduction {
  None
  Mean
  Sum
}

pub(all) struct Sequential {
  modules : Array[Module]
}
impl Sequential {
  forward(Self[Module], @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  new[Module : Module](Array[Module]) -> Self[Module]
  output(Self[Module], Logger) -> Unit
  parameters(Self[Module]) -> Iter[@tensor.Tensor[Float]]
  to_string(Self[Module]) -> String
}

type SiLU
impl SiLU {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for SiLU
impl ToJson for SiLU
impl @json.FromJson for SiLU

type Sigmoid
impl Sigmoid {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for Sigmoid
impl ToJson for Sigmoid
impl @json.FromJson for Sigmoid

type Softmax
impl Softmax {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for Softmax
impl ToJson for Softmax
impl @json.FromJson for Softmax

type Tanh
impl Tanh {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  new() -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
  to_json(Self) -> Json
}
impl Show for Tanh
impl ToJson for Tanh

// Type aliases

// Traits
pub(open) trait Module : Show {
  forward(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  parameters(Self) -> Iter[@tensor.Tensor[Float]]
}
impl[A : Module, B : Module] Module for (A, B)
impl[A : Module, B : Module, C : Module] Module for (A, B, C)
impl[A : Module, B : Module, C : Module, D : Module] Module for (A, B, C, D)
impl[A : Module, B : Module, C : Module, D : Module, E : Module] Module for (A, B, C, D, E)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module] Module for (A, B, C, D, E, F)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module] Module for (A, B, C, D, E, F, G)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module] Module for (A, B, C, D, E, F, G, H)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module] Module for (A, B, C, D, E, F, G, H, I)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module] Module for (A, B, C, D, E, F, G, H, I, J)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module, K : Module] Module for (A, B, C, D, E, F, G, H, I, J, K)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module, K : Module, L : Module] Module for (A, B, C, D, E, F, G, H, I, J, K, L)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module, K : Module, L : Module, M : Module] Module for (A, B, C, D, E, F, G, H, I, J, K, L, M)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module, K : Module, L : Module, M : Module, N : Module] Module for (A, B, C, D, E, F, G, H, I, J, K, L, M, N)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module, K : Module, L : Module, M : Module, N : Module, O : Module] Module for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)
impl[A : Module, B : Module, C : Module, D : Module, E : Module, F : Module, G : Module, H : Module, I : Module, J : Module, K : Module, L : Module, M : Module, N : Module, O : Module, P : Module] Module for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)

