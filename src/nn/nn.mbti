package tonyfettes/torch/nn

alias @moonbitlang/core/json as @json
alias @tonyfettes/torch/distributions as @distributions
alias @tonyfettes/torch/nn/internal/transpile as @transpile
alias @tonyfettes/torch/shape as @shape
alias @tonyfettes/torch/tensor as @tensor

// Values

// Types and methods
pub struct AvgPool2d {
  pub kernel_size : (Int, Int)
  pub stride : (Int, Int)
}
impl AvgPool2d {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new[KernelSize : @shape.Shape2d](KernelSize, ~stride? : @shape.Shape2d) -> Self
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub struct Conv2d {
  pub weight : Array[Array[@tensor.Tensor]]
  pub bias : Array[@tensor.Tensor]
  pub padding : (Int, Int)
}
impl Conv2d {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new[KernelSize : @shape.Shape2d](Int, Int, ~kernel_size : KernelSize, ~padding : @shape.Shape2d = ..) -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub struct CrossEntropyLoss {
  pub reduction : Reduction
}
impl CrossEntropyLoss {
  forward(Self, @tensor.Tensor, @tensor.Tensor) -> @tensor.Tensor
  new(~reduction : Reduction = ..) -> Self
  output(Self, Logger) -> Unit
}

type Flatten
impl Flatten {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new(~start : Int = .., ~end? : Int) -> Self
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub struct Linear {
  pub weight : @tensor.Tensor
  pub bias : @tensor.Tensor
}
impl Linear {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new(Int, Int, ~weight_distribution? : @distributions.Continuous, ~bias_distribution? : @distributions.Continuous) -> Self
  of(@tensor.Tensor, @tensor.Tensor) -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub type MSELoss
impl MSELoss {
  forward(Self, @tensor.Tensor, @tensor.Tensor) -> @tensor.Tensor
  new() -> Self
  output(Self, Logger) -> Unit
}

pub type ReLU
impl ReLU {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub type ReLU6

pub enum Reduction {
  None
  Mean
  Sum
}

type Sequential
impl Sequential {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  new(Array[Module]) -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor]
  to_string(Self) -> String
}

type Sigmoid
impl Sigmoid {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub type Softmax
impl Softmax {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  new() -> Self
  output(Self, Logger) -> Unit
  parameters(Self) -> Iter[@tensor.Tensor]
  to_json(Self) -> Json
  to_string(Self) -> String
}

// Type aliases

// Traits
pub trait Loss {
  forward(Self, @tensor.Tensor, @tensor.Tensor) -> @tensor.TensorValue
}

pub trait Module : Show + @transpile.ToPyTorchSource {
  forward(Self, @tensor.Tensor) -> @tensor.Tensor
  parameters(Self) -> Iter[@tensor.Tensor]
}

// Extension Methods
impl Show for AvgPool2d

impl Show for Conv2d

impl Show for Flatten

impl Show for Linear

impl Show for ReLU

impl Show for Sigmoid

impl Show for Softmax

impl Module for Tuple(2)

impl Module for Tuple(3)

impl Module for Tuple(4)

impl Module for Tuple(5)

impl Module for Tuple(6)

impl Module for Tuple(7)

impl Module for Tuple(8)

impl Module for Tuple(9)

impl Module for Tuple(10)

impl Module for Tuple(11)

impl Module for Tuple(12)

impl Module for Tuple(13)

impl Module for Tuple(14)

impl Module for Tuple(15)

impl Module for Tuple(16)

impl @transpile.ToPyTorchSource for AvgPool2d

impl @transpile.ToPyTorchSource for Conv2d

impl @transpile.ToPyTorchSource for Flatten

impl @transpile.ToPyTorchSource for Linear

impl @transpile.ToPyTorchSource for ReLU

impl @transpile.ToPyTorchSource for Sequential

impl @transpile.ToPyTorchSource for Sigmoid

impl @transpile.ToPyTorchSource for Softmax

