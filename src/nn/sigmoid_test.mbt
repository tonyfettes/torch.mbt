test "Sigmoid" {
  @distributions.seed(b"12345678223456783234567842345678")
  let input = @distributions.Uniform::new(-1.0, 1.0).sample([3, 3])
  @json.inspect!(input, content=[
    [-0.2955702543258667, -0.8177422285079956, -0.8997843861579895],
    [-0.1545487642288208, -0.552005410194397, -0.0948251485824585],
    [0.6609057188034058, 0.21990251541137695, 0.43133544921875],
  ])
  @json.inspect!(input.sigmoid(), content=[
    [0.42664071917533875, 0.3062431216239929, 0.28909480571746826],
    [0.4614395201206207, 0.36539924144744873, 0.47631147503852844],
    [0.6594638228416443, 0.5547551512718201, 0.6061924695968628],
  ])
}

test "Sigmoid/Backward" {
  @distributions.seed(b"12345678223456783234567842345678")
  let input = @distributions.Uniform::new(-1.0, 1.0).sample([3, 3])
  @json.inspect!(input, content=[
    [-0.2955702543258667, -0.8177422285079956, -0.8997843861579895],
    [-0.1545487642288208, -0.552005410194397, -0.0948251485824585],
    [0.6609057188034058, 0.21990251541137695, 0.43133544921875],
  ])
  let sigmoid = input.sigmoid()
  @json.inspect!(sigmoid, content=[
    [0.42664071917533875, 0.3062431216239929, 0.28909480571746826],
    [0.4614395201206207, 0.36539924144744873, 0.47631147503852844],
    [0.6594638228416443, 0.5547551512718201, 0.6061924695968628],
  ])
  let optimizer = @optim.SGD::new(Iter::singleton(input), learning_rate=0.1)
  optimizer.zero_grad()
  sigmoid.sum().backward()
  optimizer.step()
  @json.inspect!(input, content=[
    [-0.3200320899486542, -0.8389880657196045, -0.9203363060951233],
    [-0.17940007150173187, -0.5751936435699463, -0.11976903676986694],
    [0.6384485960006714, 0.19520233571529388, 0.4074631333351135],
  ])
}
