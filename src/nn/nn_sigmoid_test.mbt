test "Sigmoid" {
  @distributions.seed(b"12345678223456783234567842345678")
  let input = @distributions.Uniform::new(-1, 1).sample([3, 3])
  @json.inspect!(
    input,
    content=[
      [-0.2955702841281891, -0.8177422285079956, -0.8997843861579895],
      [-0.154548779129982, -0.5520054697990417, -0.09482517838478088],
      [0.660905659198761, 0.21990250051021576, 0.4313355088233948],
    ],
  )
  @json.inspect!(
    input.sigmoid(),
    content=[
      [0.42664071917533875, 0.3062431216239929, 0.28909480571746826],
      [0.4614395201206207, 0.36539924144744873, 0.47631141543388367],
      [0.6594638228416443, 0.5547551512718201, 0.6061925292015076],
    ],
  )
}

test "Sigmoid/Backward" {
  @distributions.seed(b"12345678223456783234567842345678")
  let input = @distributions.Uniform::new(-1, 1).sample([3, 3])
  @json.inspect!(
    input,
    content=[
      [-0.2955702841281891, -0.8177422285079956, -0.8997843861579895],
      [-0.154548779129982, -0.5520054697990417, -0.09482517838478088],
      [0.660905659198761, 0.21990250051021576, 0.4313355088233948],
    ],
  )
  let sigmoid = input.sigmoid()
  @json.inspect!(
    sigmoid,
    content=[
      [0.42664071917533875, 0.3062431216239929, 0.28909480571746826],
      [0.4614395201206207, 0.36539924144744873, 0.47631141543388367],
      [0.6594638228416443, 0.5547551512718201, 0.6061925292015076],
    ],
  )
  let optimizer = @optim.SGD::new(Iter::singleton(input), learning_rate=0.1)
  optimizer.zero_grad()
  sigmoid.sum().backward()
  optimizer.step()
  @json.inspect!(
    input,
    content=[
      [-0.32003211975097656, -0.8389880657196045, -0.9203363060951233],
      [-0.17940008640289307, -0.5751937627792358, -0.11976905912160873],
      [0.6384485363960266, 0.1952023208141327, 0.4074631929397583],
    ],
  )
}
