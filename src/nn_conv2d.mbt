pub struct Conv2d {
  weight : Array[Array[Tensor]]
  padding : (Int, Int)
} derive(Show, ToJson, FromJson)

pub fn Conv2d::new[KernelSize : Shape2d](
  in_channels : Int,
  out_channels : Int,
  ~kernel_size : KernelSize,
  ~padding : Shape2d = 0
) -> Conv2d {
  let kernel_size = kernel_size.to_fixed_array()
  let weight_distribution : Continuous = {
    let mut n = in_channels
    for k in kernel_size {
      n *= k
    }
    let stdv = 1.0 / n.to_double().sqrt()
    Uniform::new(-stdv, stdv)
  }
  let weight = Array::makei(
    in_channels,
    fn {
      _ =>
        Array::makei(
          out_channels,
          fn { _ => weight_distribution.sample(shape=kernel_size) },
        )
    },
  )
  Conv2d::{ weight, padding: padding.to_tuple() }
}

pub fn Conv2d::output(self : Conv2d, logger : Logger) -> Unit {
  Show::output(self.weight, logger)
}

pub fn Conv2d::forward(self : Conv2d, input : Tensor) -> Tensor {
  let output = []
  for n = 0; n < input.shape[0]; n = n + 1 {
    let channels = FixedArray::make(input.shape[1], tensor(0.0))
    for c = 0; c < input.shape[1]; c = c + 1 {
      channels[c] = cross_correlation(
        input[n][c].to_tensor(),
        self.weight[n][c],
      )
    }
    output.push(Tensor::stack(channels).sum())
  }
  let output = FixedArray::from_array(output)
  Tensor::stack(output)
}

pub fn Conv2d::parameters(self : Conv2d) -> Iter[Tensor] {
  self.weight.iter().flat_map(fn { channel => channel.iter() })
}

test "Conv2d" {
  seed(b"12345678223456783234567842345678")
  let distribution = Uniform::new(-1.0, 1.0)
  let image = distribution.sample(shape=[8, 8, 3])
  let image = Tensor::stack([image])
  inspect!(image.shape, content="[1, 8, 8, 3]")
  let image = image.moveaxis(3, 0)
  let layer = Conv2d::new(3, 3, kernel_size=(3, 3))
  let output = layer.forward(image)
  inspect!(
    output,
    content="[[[0.058075759215143914, -0.16063092763652176, -0.03741819893909867, 0.25361733220867844, -0.05295175629184748, -0.05991459527859369], [-0.13851928280777442, 0.1811847708013928, -0.028268394100591343, -0.22033337941548675, -0.056735922426044555, 0.19307362844954168], [0.38049415350643867, -0.15183327519600048, -0.24160854806853266, 0.4231643941997336, -0.3793150216966293, 0.12024556328867778], [-0.37939010796375666, 0.09684476963036182, 0.021660858570707826, 0.0003055772127585066, -0.022266217581176948, 0.2836257941676576], [0.14668124858153148, -0.08652244890774818, -0.013630761544776042, 0.0975213899462427, -0.15860040909570525, -0.31994198140539026], [-0.15689150252246487, 0.0008474905086707368, -0.32111396283094273, 0.16235176655454872, -0.05122689583604067, 0.3529541054835831]], [[-0.3377059213707866, -0.033917334128412066, 0.10090032486876395, 0.36597818940020527, -0.2868258330806197, 0.09867737229089292], [-0.01901616600598497, 0.12374568636878104, -0.024169322263456562, -0.2553931233930616, -0.018422436644636005, 0.02553199848481981], [0.3861757343985077, -0.04332887054145523, -0.04969904786344681, -0.016287578146344614, 0.1650505172844918, 0.29528964828777193], [-0.19162663568455152, -0.031304988138927584, 0.19391628361234015, 0.0531684539817167, -0.15795888686732235, -0.3419768454893056], [0.17384751368678547, -0.03442527971294916, -0.28945293757281265, 0.09667886342265906, 0.024618622978486687, 0.16650020023271117], [-0.21133220208708275, 0.1090093667421972, 0.06660489175151979, -0.37873582989263777, -0.13682686662243343, 0.1264610824359543]], [[0.29359078393753063, 0.10370947884164192, -0.13912321234551875, 0.14823326867608394, -0.37758669467335304, 0.11080929310191644], [-0.08698544668974875, 0.07457276647965189, -0.11152421166620854, -0.2208341836817922, 0.08816736226423626, -0.197947398365736], [0.17425805425847224, -0.0057537899528432995, 0.19901966314259698, -0.22672907394461658, -0.03951457161122883, 0.04737107150192316], [0.0510541014343457, 0.1397427662784957, 0.05644918364213242, 0.05342780516449426, -0.21081440765466375, -0.2553147731644573], [-0.3065730100100242, 0.009354178095257688, -0.18844500475718073, -0.10482062403492143, 0.03865783925057999, -0.004261156997310604], [0.13238996164726263, 0.2599752692218932, 0.1400341671553756, -0.1710196910234129, -0.004158186621989395, -0.23459569631965696]]]",
  )
}
