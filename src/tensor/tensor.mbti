package tonyfettes/torch/tensor

alias @moonbitlang/core/json as @json
alias @tonyfettes/torch/internal/unsafe as @unsafe
alias @tonyfettes/torch/shape as @shape

// Values
fn correlate2d(Tensor, Tensor, stride~ : @shape.Shape2d = .., padding~ : @shape.Shape2d = ..) -> Tensor

fn empty[Shape : @shape.Shape](Shape, requires_grad~ : Bool = ..) -> Tensor

fn eye(Int, m? : Int, requires_grad~ : Bool = ..) -> Tensor

fn gather(Tensor, Int, Tensor) -> Tensor

fn tensor[X : ToTensor](X, requires_grad~ : Bool = ..) -> Tensor

fn with_no_grad[X](() -> X) -> X

fn with_no_grad_error[X](() -> X!) -> X!

// Types and methods
type Graph
impl Show for Graph

pub(readonly) struct Tensor {
  value : @unsafe.UnsafeArray[Float]
  shape : @unsafe.UnsafeArray[Int]
  block : @unsafe.UnsafeArray[Int]
  grad : @unsafe.UnsafeArray[Float]
  // private fields
}
impl Tensor {
  avg_pool2d(Self, kernel_size~ : (Int, Int), stride~ : (Int, Int)) -> Self
  backward(Self) -> Unit
  broadcast(Self, Self) -> (Self, Self)
  broadcast_to[Shape : @shape.Shape](Self, Shape) -> Self
  cat(FixedArray[Self], dim~ : Int = ..) -> Self
  exp(Self) -> Self
  fill_[Value : ToTensor](Self, Value) -> Unit
  flatten(Self, start~ : Int = .., end? : Int) -> Self
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  iter(Self, dim~ : Int = ..) -> Iter[Self]
  length(Self) -> Int
  log(Self) -> Self
  matmul(Self, Self) -> Self
  max(Self, dim? : Int, keep_dim~ : Bool = ..) -> (Self, Self)
  max_pool2d(Self, kernel_size~ : (Int, Int), stride~ : (Int, Int)) -> Self
  mean(Self, dim? : @shape.Shape, keep_dim~ : Bool = ..) -> Self
  moveaxis[Shape : @shape.Shape](Self, Shape, Shape) -> Self
  new[X : ToTensor](X, requires_grad~ : Bool = ..) -> Self
  ones[Shape : @shape.Shape](Shape, requires_grad~ : Bool = ..) -> Self
  op_add(Self, Self) -> Self
  op_as_view(Self, start~ : Int, end? : Int) -> TensorView
  op_div(Self, Self) -> Self
  op_get(Self, Int) -> TensorView
  op_mul(Self, Self) -> Self
  op_neg(Self) -> Self
  op_set[X : ToTensor](Self, Int, X) -> Unit
  op_sub(Self, Self) -> Self
  output(Self, Logger) -> Unit
  permute(Self, Array[Int]) -> Self
  pow(Self, Int) -> Self
  relu(Self) -> Self
  requires_grad(Self) -> Bool
  requires_grad_(Self, Bool) -> Unit
  reshape[Shape : @shape.Shape](Self, Shape) -> Self
  shape(Self) -> FixedArray[Int]
  sigmoid(Self) -> Self
  sqrt(Self) -> Self
  squeeze(Self, dim? : @shape.Shape) -> Self
  stack[X : TensorLike](FixedArray[X]) -> Self
  sum(Self, dim? : @shape.Shape, keep_dim~ : Bool = ..) -> Self
  tanh(Self) -> Self
  to_double(Self) -> Double
  to_float(Self) -> Float
  to_json(Self) -> Json
  to_string(Self) -> String
  transpose(Self, Int, Int) -> Self
  value(Self) -> FixedArray[Float]
  zeros[Shape : @shape.Shape](Shape, requires_grad~ : Bool = ..) -> Self
}
impl TensorLike for Tensor
impl ToTensor for Tensor

type TensorIndex
impl Show for TensorIndex

type TensorView
impl TensorView {
  log(Self) -> Tensor
  op_add(Self, Self) -> Tensor
  op_as_view(Self, start~ : Int, end? : Int) -> Self
  op_get(Self, Int) -> Self
  op_mul(Self, Self) -> Tensor
  op_set(Self, Int, ToTensor) -> Unit
  op_sub(Self, Self) -> Tensor
  output(Self, Logger) -> Unit
  to_double(Self) -> Double
  to_json(Self) -> Json
  to_string(Self) -> String
  to_tensor(Self) -> Tensor
}

// Type aliases

// Traits
pub(readonly) trait Default {
  default() -> Self
}
impl Default for Bool
impl Default for Int
impl Default for Float
impl Default for Double
impl[X] Default for FixedArray[X]
impl[X] Default for Array[X]

trait TensorLike
impl[X : TensorLike] TensorLike for FixedArray[X]
impl[X : TensorLike] TensorLike for Array[X]

pub(readonly) trait ToTensor : Show {
  to_tensor(Self) -> Tensor
}
impl ToTensor for Bool
impl ToTensor for Int
impl ToTensor for Float
impl ToTensor for Double
impl[X : ToTensor + Default] ToTensor for FixedArray[X]
impl[X : ToTensor + Default] ToTensor for Array[X]

