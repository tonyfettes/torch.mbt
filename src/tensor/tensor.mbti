package tonyfettes/torch/tensor

alias @moonbitlang/core/json as @json
alias @tonyfettes/torch/shape as @shape

// Values
fn correlate2d(Tensor, Tensor, ~stride : Int = .., ~padding : @shape.Shape2d = ..) -> Tensor

let empty : Tensor

fn tensor[X : TensorValue + Show](X, ~requires_grad : Bool = ..) -> Tensor

fn with_no_grad[X](() -> X) -> X

fn with_no_grad_error[X](() -> X!) -> X!

// Types and methods
pub enum Graph {
  Val
  Var
  Add(Tensor, Tensor)
  Sub(Tensor, Tensor)
  Mul(Tensor, Tensor)
  Div(Tensor, Tensor)
  Neg(Tensor)
  Exp(Tensor)
  Log(Tensor)
  Sum(Tensor, FixedArray[Array[Int]])
  Pow(Tensor, Int)
  MatMul(Tensor, Tensor)
  Get(Tensor, FixedArray[Int])
  Cat(FixedArray[Tensor], FixedArray[(Int, Int)])
  Nop(Tensor)
  ReLU(Tensor)
}
impl Graph {
  to_string(Self) -> String
}

pub struct Tensor {
  pub value : FixedArray[Double]
  pub shape : FixedArray[Int]
  pub block : FixedArray[Int]
  pub graph : Graph
  pub ref : Int
  pub grad : FixedArray[Double]
}
impl Tensor {
  avg_pool2d(Self, ~kernel_size : (Int, Int), ~stride : (Int, Int)) -> Self
  backward(Self) -> Unit
  broadcast(Self, Self) -> (Self, Self)
  cat(FixedArray[Self], ~dim : Int = ..) -> Self
  dot(Self, Self) -> Self
  exp(Self) -> Self
  flatten(Self, ~start : Int = .., ~end? : Int) -> Self
  from_json(Json, @json.JsonPath) -> Self!@json.JsonDecodeError
  get(Self, Array[Int]) -> Double
  iter(Self, ~dim : Int = ..) -> Iter[Self]
  length(Self) -> Int
  log(Self) -> Self
  matmul(Self, Self) -> Self
  max(Self) -> Self
  mean(Self) -> Self
  moveaxis[Shape : @shape.Shape](Self, Shape, Shape) -> Self
  new[X : TensorValue + Show](X, ~requires_grad : Bool = ..) -> Self
  op_add(Self, Self) -> Self
  op_as_view(Self, ~start : Int, ~end? : Int) -> TensorView
  op_div(Self, Self) -> Self
  op_get(Self, Int) -> TensorView
  op_mul(Self, Self) -> Self
  op_neg(Self) -> Self
  op_set[X : TensorValue + Show](Self, Int, X) -> Unit
  op_sub(Self, Self) -> Self
  output(Self, Logger) -> Unit
  permute(Self, Array[Int]) -> Self
  pow(Self, Int) -> Self
  reLU(Self) -> Self
  reshape(Self, FixedArray[Int]) -> Self
  set(Self, Array[Int], Double) -> Unit
  shape(Self) -> FixedArray[Int]
  sigmoid(Self) -> Self
  stack[X : TensorLike](FixedArray[X]) -> Self
  sum(Self, ~dim : @shape.Shape = ..) -> Self
  to_double(Self) -> Double
  to_json(Self) -> Json
  to_string(Self) -> String
  to_tensor(Self) -> Self
  upgrade(Self, ~dim : Int = ..) -> Self
  value(Self) -> FixedArray[Double]
  zeros[Shape : @shape.Shape](Shape, ~requires_grad : Bool = ..) -> Self
}

pub enum TensorIndex {
  Index(Int)
  Slice(Int, Int)
}
impl TensorIndex {
  to_string(Self) -> String
}

pub struct TensorView {
  pub tensor : Tensor
  pub index : Array[TensorIndex]
}
impl TensorView {
  log(Self) -> Tensor
  op_add(Self, Self) -> Tensor
  op_as_view(Self, ~start : Int, ~end? : Int) -> Self
  op_get(Self, Int) -> Self
  op_mul(Self, Self) -> Tensor
  op_set(Self, Int, TensorValue) -> Unit
  op_sub(Self, Self) -> Tensor
  output(Self, Logger) -> Unit
  to_json(Self) -> Json
  to_string(Self) -> String
  to_tensor(Self) -> Tensor
}

// Type aliases

// Traits
pub trait Default {
  default() -> Self
}

pub trait TensorLike {
  to_tensor(Self) -> Tensor
}

pub trait TensorValue : Show {
  to_tensor(Self, ~requires_grad : Bool) -> Tensor
}

// Extension Methods
impl Show for Graph

impl Show for TensorIndex

impl Default for Double

impl Default for Array

impl TensorLike for FixedArray

impl TensorLike for Array

impl TensorLike for Tensor

impl TensorValue for Double

impl TensorValue for FixedArray

impl TensorValue for Array

