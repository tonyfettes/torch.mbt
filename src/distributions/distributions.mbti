package tonyfettes/torch/distributions

alias @tonyfettes/torch/shape as @shape
alias @tonyfettes/torch/tensor as @tensor

// Values
fn seed(Bytes) -> Unit

let standard_normal : Normal

// Types and methods
type Categorical
impl Categorical {
  log_prob(Self, @tensor.Tensor[Float]) -> @tensor.Tensor[Float]
  of_logits(@tensor.Tensor[Float]) -> Self
  of_probs(@tensor.Tensor[Float]) -> Self
  sample[Shape : @shape.Shape](Self, Shape) -> @tensor.Tensor[Float]
  sample_(Self, @tensor.Tensor[Float]) -> Unit
}

type Normal
impl Normal {
  entropy(Self) -> @tensor.Tensor[Float]
  new[Loc : @tensor.ToValue, Scale : @tensor.ToValue](Loc, Scale) -> Self
  rsample(Self, @shape.Shape) -> @tensor.Tensor[Float]
  sample(Self, @shape.Shape) -> @tensor.Tensor[Float]
  sample_(Self, @tensor.Tensor[Float]) -> Unit
}

type Uniform
impl Uniform {
  entropy(Self) -> @tensor.Tensor[Float]
  new[Lower : @tensor.ToValue, Upper : @tensor.ToValue](Lower, Upper) -> Self
  rsample(Self, @shape.Shape) -> @tensor.Tensor[Float]
  sample(Self, @shape.Shape) -> @tensor.Tensor[Float]
  sample_(Self, @tensor.Tensor[Float]) -> Unit
}

// Type aliases

// Traits
pub(readonly) trait Continuous : Distribution {
  rsample(Self, @shape.Shape) -> @tensor.Tensor[Float]
}

pub(readonly) trait Distribution {
  sample(Self, @shape.Shape) -> @tensor.Tensor[Float]
  sample_(Self, @tensor.Tensor[Float]) -> Unit
}

