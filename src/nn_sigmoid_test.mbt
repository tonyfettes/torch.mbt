test "Sigmoid" {
  @torch.seed(b"12345678223456783234567842345678")
  let input = @torch.Uniform::new(-1, 1).sample([3, 3])
  @json.inspect!(
    input,
    content=[
      [-0.29557028390369, -0.8177422144361883, -0.8997844018869048],
      [-0.1545487762608706, -0.5520054503667071, -0.09482517741472507],
      [0.6609056774831252, 0.21990249887250046, 0.4313355035432884],
    ],
  )
  @json.inspect!(
    input.sigmoid(),
    content=[
      [0.4266407195423779, 0.30624313516780693, 0.28909480486844663],
      [0.4614395278462282, 0.36539925445953875, 0.47631145323784313],
      [0.6594638069803208, 0.5547551522746634, 0.6061925292136984],
    ],
  )
}

test "Sigmoid/Backward" {
  @torch.seed(b"12345678223456783234567842345678")
  let input = @torch.Uniform::new(-1, 1).sample([3, 3])
  @json.inspect!(
    input,
    content=[
      [-0.29557028390369, -0.8177422144361883, -0.8997844018869048],
      [-0.1545487762608706, -0.5520054503667071, -0.09482517741472507],
      [0.6609056774831252, 0.21990249887250046, 0.4313355035432884],
    ],
  )
  let sigmoid = input.sigmoid()
  @json.inspect!(
    sigmoid,
    content=[
      [0.4266407195423779, 0.30624313516780693, 0.28909480486844663],
      [0.4614395278462282, 0.36539925445953875, 0.47631145323784313],
      [0.6594638069803208, 0.5547551522746634, 0.6061925292136984],
    ],
  )
  let optimizer = @torch.SGD::new(Iter::singleton(input), learning_rate=0.1)
  optimizer.zero_grad()
  sigmoid.sum().backward()
  optimizer.step()
  @json.inspect!(
    input,
    content=[
      [-0.320032125500764, -0.8389880421692283, -0.920336301753557],
      [-0.1794000852595984, -0.5751937142967023, -0.11976906268995478],
      [0.638448548056791, 0.19520231154256262, 0.40746318886936866],
    ],
  )
}
